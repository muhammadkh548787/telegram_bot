import telebot
from telebot import types
import os
import json  

from PIL import Image, ImageDraw, ImageFont
import io

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot('7010693172:AAFDHXLGGySHpqsCV69k7d5Cc4GSJ16xW-M')

media_folder = "media"
if not os.path.exists(media_folder):
    os.makedirs(media_folder)









@bot.message_handler(commands=['users'])
def send_all_users_data(message):
    user_id = message.chat.id
    admin_id = [1618482185, 1053513735, 7084395348, 546637875, 781249409]

    if user_id in admin_id:
        user_data = ""

        for course_type in ['mini', 'big']:
            file_name = f"{course_type}_course.txt"
            file_path = os.path.join(media_folder, file_name)

            if os.path.exists(file_path):
                with open(file_path, 'r', encoding='utf-8') as file:
                    course_name = "–ö—É—Ä—Å–∏ –∫–∞–ª–æ–Ω" if course_type == 'big' else "–ú–∏–Ω–∏ –∫—É—Ä—Å"
                    user_data += f"{course_name}:\n\n"  # –∏–∑–º–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
                    user_data += file.read() + "\n\n"

        if user_data:
            bot.send_message(user_id, user_data)
        else:
            bot.send_message(user_id, "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")








media_categories = ['üìñ –î–∞—Ä—Å–∏ —Ä–æ–π–≥–æ–Ω', 'üìö –ú–∏–Ω–∏ –∫—É—Ä—Å', 'üéì –ö—É—Ä—Å–∏ –∫–∞–ª–æ–Ω', 'üí¨ –û—Ç–∑—ã–≤“≥–æ', 'üë®‚Äçüè´ –û–º—É–∑–≥–æ—Ä–æ–Ω', 'üßë‚Äçüíª –≠–∫–æ—Å–∏—Å—Ç–µ–º–∞']

for category in media_categories:
    category_folder = f"{media_folder}/{category}"
    if not os.path.exists(category_folder):
        os.makedirs(category_folder)

registered_users_folder = "registered_users"  # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö

new_des = {}

user_data = {}

admin_id = [1618482185, 1053513735, 7084395348, 546637875, 781249409]

user_data = {}
inline_buttons_dict = {}


keyboard_user = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=False)
keyboard_user.add('üìñ –î–∞—Ä—Å–∏ —Ä–æ–π–≥–æ–Ω', 'üìö –ú–∏–Ω–∏ –∫—É—Ä—Å', 'üéì –ö—É—Ä—Å–∏ –∫–∞–ª–æ–Ω', 'üí¨ –û—Ç–∑—ã–≤“≥–æ', 'üë®‚Äçüè´ –û–º—É–∑–≥–æ—Ä–æ–Ω', 'üßë‚Äçüíª –≠–∫–æ—Å–∏—Å—Ç–µ–º–∞', '‚úçÔ∏è –ù–æ–º–Ω–∞–≤–∏—Å–∏ –±–∞ –∫—É—Ä—Å')

keyboard_admin = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=False)
keyboard_admin.add('–¥–æ–±–∞–≤–∏—Ç—å', '—É–¥–∞–ª–∏—Ç—å', '—Ä–∞—Å—Å—ã–ª–∫–∞','–∫–æ–º–∞–Ω–¥—ã')



video_links = []

@bot.message_handler(commands=['set_video'])
def set_video(message):
    user_id = message.chat.id

    if user_id in admin_id:
        bot.send_message(user_id, "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ")
        bot.register_next_step_handler(message, save_video)
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")

def save_video(message):
    user_id = message.chat.id
    new_video_file = message.video.file_id

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–∏–¥–µ–æ –∏–∑ —Å–ø–∏—Å–∫–∞
    if video_links:
        previous_video_file = video_links.pop()
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –∑–¥–µ—Å—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ API Telegram Bot

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –≤ —Å–ø–∏—Å–æ–∫
    video_links.append(new_video_file)

    bot.send_message(user_id, "–ù–æ–≤–æ–µ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª
@bot.message_handler(commands=['start'])
def handle_start(message):
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    save_user_account_name(message)



@bot.message_handler(commands=['actives'])
def send_active_users(message):
    file_path = 'media/users.txt'
    active_users_data = ""
    
    with open(file_path, 'r', encoding='utf-8') as file:
        active_users_data = file.read()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏–∑ —Ñ–∞–π–ª–∞
    bot.send_message(message.chat.id, "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + active_users_data)

def send_welcome(message):
    user_id = message.chat.id

    if user_id in admin_id:
        user_data[user_id] = {'keyboard': keyboard_admin}
        bot.send_message(user_id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.first_name}!", reply_markup=keyboard_admin)
    else:
        user_data[user_id] = {'keyboard': keyboard_user}
        bot.send_message(user_id, f"–°–∞–ª–æ–º {message.from_user.first_name}", reply_markup=user_data[user_id]['keyboard'])

    # send_initial_message(user_id)

    for video_link in video_links:
        bot.send_video(user_id, video_link)


def save_user_account_name(message):
    user_name = message.from_user.username
    first_name = message.from_user.first_name

    file_path = 'media/users.txt'
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
    user_already_exist = False
    
    if not os.path.exists(file_path):
        open(file_path, 'w').close()  # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç

    with open(file_path, 'r+', encoding='utf-8') as file:
        lines = file.readlines()
        for line in lines:
            if f"–ò–º—è: {first_name}, Username: @{user_name}" in line:
                user_already_exist = True
                break

    if not user_already_exist:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª
        with open(file_path, 'a', encoding='utf-8') as file:
            file.write(f"–ò–º—è: {first_name}, Username: @{user_name}\n")
        
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    send_welcome(message)



#########################################################################################

@bot.message_handler(func=lambda message: message.text == '–∫–æ–º–∞–Ω–¥—ã' and message.chat.id in admin_id)
def send_commands(message):
    commands_text = "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n1. /start - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥\n2. /actives - –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n3. /users - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n4. /set_video - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ"
    bot.send_message(message.chat.id, commands_text)






def create_keyboard(categories_list, include_back_button=False):
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    buttons = [types.KeyboardButton(category) for category in categories_list]
    keyboard.add(*buttons)

    if include_back_button:
        back_button = types.KeyboardButton('–ù–∞–∑–∞–¥')
        keyboard.add(back_button)

    return keyboard



@bot.message_handler(func=lambda message: message.text == '–¥–æ–±–∞–≤–∏—Ç—å' and message.chat.id in admin_id)
def add_media_prompt(message):
    user_id = message.chat.id
    if user_data.get(user_id, {}).get('step') != 'choose_category':
        user_data.setdefault(user_id, {})
        user_data[user_id]['step'] = 'choose_category'
        user_data[user_id]['inline_keyboard'] = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)

        user_data[user_id]['text_added'] = False

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = ['üìñ –î–∞—Ä—Å–∏ —Ä–æ–π–≥–æ–Ω', 'üìö –ú–∏–Ω–∏ –∫—É—Ä—Å', 'üéì –ö—É—Ä—Å–∏ –∫–∞–ª–æ–Ω', 'üí¨ –û—Ç–∑—ã–≤“≥–æ', 'üë®‚Äçüè´ –û–º—É–∑–≥–æ—Ä–æ–Ω', 'üßë‚Äçüíª –≠–∫–æ—Å–∏—Å—Ç–µ–º–∞']

        # –ò–∑–º–µ–Ω—è–µ–º —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        for i in range(0, len(categories), 2):
            if i + 1 < len(categories):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∞—è –∫–Ω–æ–ø–∫–∞ —Ç–∞–∫–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                button1 = types.KeyboardButton(categories[i])
                button2 = types.KeyboardButton(categories[i + 1])
                user_data[user_id]['inline_keyboard'].row(button1, button2)
            else:  # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –æ—Ç–¥–µ–ª—å–Ω–æ
                button1 = types.KeyboardButton(categories[i])
                user_data[user_id]['inline_keyboard'].add(button1)
            
        back_button = types.KeyboardButton('–ù–∞–∑–∞–¥')
        user_data[user_id]['inline_keyboard'].add(back_button)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ 'media' –∏ —Å–æ–∑–¥–∞–µ–º –µ–µ, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if not os.path.exists('media'):
            os.mkdir('media')

        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞", reply_markup=user_data[user_id]['inline_keyboard'])



@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥' and message.chat.id in admin_id)
def go_back(message):
    user_id = message.chat.id
    user_data[user_id]['step'] = None
    bot.send_message(user_id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫:", reply_markup=keyboard_admin)





@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get('step') == 'choose_category')
def choose_category_and_continue(message):
    user_id = message.chat.id
    category = message.text
    media_folder = os.path.join('media', category)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–æ–∑–¥–∞–µ–º –µ–µ, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(media_folder):
        os.mkdir(media_folder)

    user_data[user_id]['category'] = category

    user_data[user_id]['step'] = 'add_text'  #


    bot.send_message(user_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{message.text}'. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
    
    user_data[user_id]['step'] = 'upload_photo', 'upload_video'
    user_data[user_id]['step'] = 'add_text'





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—è–º–∏
@bot.message_handler(content_types=['photo'])
def save_photo_with_caption(message):
    user_id = message.chat.id
    category = user_data.get(user_id, {}).get('category')

    if category:
        photo_file_id = message.photo[-1].file_id
        caption = message.caption if message.caption else ""

        if not os.path.exists(f'media/{category}'):
            os.makedirs(f'media/{category}')

        existing_photos = os.listdir(f'media/{category}')
        photo_number = len(existing_photos) + 1
        
        photo_data = {
            'image_path': f'media/{category}/photo_{photo_number}.jpg',
            'caption': caption
        }

        with open(photo_data['image_path'], 'wb') as new_file:
            new_file.write(bot.download_file(bot.get_file(photo_file_id).file_path))
        
        with open(f'media/{category}/photo_{photo_number}.json', 'w') as json_file:
            json.dump(photo_data, json_file)
        
        bot.send_message(user_id, f"–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤–º–µ—Å—Ç–µ —Å –ø–æ–¥–ø–∏—Å—å—é –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –ø–æ–¥ –∏–º–µ–Ω–µ–º 'photo_{photo_number}'.")
        user_data[user_id]['step'] = 'keyboard_admin'

    else:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")





####################################################


######################################


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—è–º–∏
@bot.message_handler(content_types=['video'])
def save_video_with_caption(message):
    user_id = message.chat.id
    category = user_data.get(user_id, {}).get('category')
    
    if category:
        video_file_id = message.video.file_id
        caption = message.caption if message.caption else ""
        
        user_data[user_id]['video_file_id'] = video_file_id
        user_data[user_id]['captions'] = user_data.get(user_id, {}).get('captions', {})
        user_data[user_id]['captions'][category] = user_data[user_id]['captions'].get(category, {})
        user_data[user_id]['captions'][category][video_file_id] = caption
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ
        video_folder = f'media/{category}'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –¥–ª—è –≤–∏–¥–µ–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        files = os.listdir(video_folder)
        video_number = 1
        while f'video_{video_number}.mp4' in files:
            video_number += 1

        video_path = os.path.join(video_folder, f'video_{video_number}.mp4')

        with open(video_path, 'wb') as new_file:
            new_file.write(bot.download_file(bot.get_file(video_file_id).file_path))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∏–¥–µ–æ –∏ –ø–æ–¥–ø–∏—Å–∏
        video_data = {
            'video_path': video_path,
            'caption': caption
        }

        with open(os.path.join(video_folder, f'video_{video_number}.json'), 'w') as json_file:
            json.dump(video_data, json_file)
        
        bot.send_message(user_id, f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å –ø–æ–¥–ø–∏—Å—å—é –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –∫–∞–∫ video_{video_number}.mp4.")
        user_data[user_id]['step'] = 'keyboard_admin'
    else:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ.")
    




#######################################################




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
@bot.message_handler(func=lambda message: message.entities is not None and message.content_type == 'text')
def save_link(message):
    user_id = message.chat.id
    category = user_data.get(user_id, {}).get('category')
    
    if category:
        for entity in message.entities:
            if entity.type == 'url':
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                link_url = message.text[entity.offset:entity.offset + entity.length]
                user_data[user_id]['saved_links'] = user_data.get(user_id, {}).get('saved_links', {})
                user_data[user_id]['saved_links'].setdefault(category, []).append(link_url)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤ —Ñ–∞–π–ª
                file_number = len(user_data[user_id]['saved_links'][category])
                file_path = f'media/{category}/link_{file_number}.txt'
                with open(file_path, 'w') as file:
                    file.write(link_url)
                
                bot.send_message(user_id, f"–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")
                user_data[user_id]['step'] = 'keyboard_admin'

    else:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫.")




############################################################################




@bot.message_handler(func=lambda message: message.text in ['üìñ –î–∞—Ä—Å–∏ —Ä–æ–π–≥–æ–Ω', 'üìö –ú–∏–Ω–∏ –∫—É—Ä—Å', 'üéì –ö—É—Ä—Å–∏ –∫–∞–ª–æ–Ω', 'üí¨ –û—Ç–∑—ã–≤“≥–æ', 'üë®‚Äçüè´ –û–º—É–∑–≥–æ—Ä–æ–Ω', 'üßë‚Äçüíª –≠–∫–æ—Å–∏—Å—Ç–µ–º–∞'] and message.chat.id not in admin_id)
def handle_keyboard_click(message):
    user_id = message.chat.id
    button_text = message.text

    media_folder_path = f'media/{button_text}'


    if os.path.exists(media_folder_path):
            files = os.listdir(media_folder_path)
            if files:
                for file in files:
                    file_path = os.path.join(media_folder_path, file)
                    if os.path.isfile(file_path):
                        try:
                            if file.endswith('.jpg'):
                                photo_name = os.path.splitext(file)[0]
                                json_file_path = os.path.join(media_folder_path, f'{photo_name}.json')
                                
                                if os.path.exists(json_file_path):
                                    try:
                                        with open(json_file_path, 'r') as json_file:
                                            data = json.load(json_file)
                                            caption = data.get('caption', "")
                                            
                                            with open(os.path.join(media_folder_path, file), 'rb') as photo_file:
                                                bot.send_photo(user_id, photo_file, caption=caption)
                                        
                                    except Exception as e:
                                        bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é: {str(e)}")


                            elif file.endswith(('.mp4', '.avi', '.mkv')):
                                video_name = os.path.splitext(file)[0]
                                json_file_path = os.path.join(media_folder_path, f'{video_name}.json')

                                if os.path.exists(json_file_path):
                                    try:
                                        with open(json_file_path, 'r') as json_file:
                                            data = json.load(json_file)
                                            caption = data.get('caption', "")

                                            with open(os.path.join(media_folder_path, file), 'rb') as video_file:
                                                bot.send_video(user_id, video_file, caption=caption, timeout=60)

                                    except Exception as e:
                                        bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é: {str(e)}")

                            elif file.endswith('.txt'):
                                with open(file_path, 'r') as text_file:
                                    link = text_file.read().strip()
                                    bot.send_message(user_id, link)
                            
                        except Exception as e:
                            bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file}: {str(e)}")
                    else:
                        bot.send_message(user_id, f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª: {file}")




#############################################################################






@bot.message_handler(func=lambda message: message.text == '—Ä–∞—Å—Å—ã–ª–∫–∞' and message.chat.id in admin_id)
def send_broadcast_options(message):
    user_id = message.chat.id
    bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
    bot.register_next_step_handler(message, process_broadcast_choice)


def process_broadcast_choice(message):
    user_id = message.chat.id
    temp_dir = 'temp'  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º temp_dir
    if message.text:
        broadcast_text = message.text
        for user in user_data:
            if user != admin_id:
                bot.send_message(user, broadcast_text)
        bot.send_message(user_id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    
    elif message.photo:
        photo_caption = message.caption
        photo_file_id = message.photo[-1].file_id
        temp_file_path = f'{temp_dir}/{photo_file_id}.jpg'
        
        if not os.path.exists(temp_dir):
            os.makedirs(temp_dir)
        
        try:
            file_info = bot.get_file(photo_file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            with open(temp_file_path, 'wb') as new_file:
                new_file.write(downloaded_file)
            
            for user in user_data:
                if user != admin_id:
                    bot.send_photo(user, open(temp_file_path, 'rb'), caption=photo_caption)
            
            bot.send_message(user_id, "–§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        
        except Exception as e:
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.")
            print(e)
        
        if os.path.exists(temp_file_path):
            os.remove(temp_file_path)

    elif message.video:
        video_caption = message.caption
        video_file_id = message.video.file_id
        temp_file_path = f'{temp_dir}/{video_file_id}.mp4'
        
        try:
            file_info = bot.get_file(video_file_id)
            downloaded_file = bot.download_file(file_info.file_path)


            with open(temp_file_path, 'wb') as new_file:
                            new_file.write(downloaded_file)
                        
                            for user in user_data:
                                if user != admin_id:
                                    bot.send_video(user, open(temp_file_path, 'rb'), caption=video_caption)
                            
                            bot.send_message(user_id, "–í–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
                    
        except Exception as e:
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ.")
            print(e)
        
        if os.path.exists(temp_file_path):
            os.remove(temp_file_path)

    elif message.voice:
        voice_caption = message.caption
        voice_file_id = message.voice.file_id
        temp_file_path = f'{temp_dir}/{voice_file_id}.ogg'  # –ó–∞–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ ogg –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        
        try:
            file_info = bot.get_file(voice_file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            with open(temp_file_path, 'wb') as new_file:
                new_file.write(downloaded_file)
            
            for user in user_data:
                if user != admin_id:
                    bot.send_voice(user, open(temp_file_path, 'rb'), caption=voice_caption)
            
            bot.send_message(user_id, "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        
        except Exception as e:
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            print(e)
        
        if os.path.exists(temp_file_path):
            os.remove(temp_file_path)




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–¥–ø–∏—Å—å—é –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
@bot.message_handler(func=lambda message: message.text == '—Ä–∞—Å—Å—ã–ª–∫–∞' and message.chat.id in admin_id)
def send_photo_with_caption_to_users(message):
    user_id = message.chat.id
    if 'photo_file_id' not in user_data[user_id]:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –ø–æ–¥–ø–∏—Å—å—é.")
        return

    photo_file_id = user_data[user_id]['photo_file_id']
    caption = user_data[user_id]['captions'][user_data[user_id]['category']][photo_file_id]

    for user in user_data.keys():
        if user != user_id:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å–∞–º–æ–º—É —Å–µ–±–µ
            with open(f'media/{user_data[user_id]["category"]}/{photo_file_id}.jpg', 'rb') as photo:
                bot.send_photo(user, photo, caption=caption)
    
    bot.send_message(user_id, "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å –ø–æ–¥–ø–∏—Å—å—é –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")



########################################################################################################




def create_keyboard(buttons):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    for i in range(0, len(buttons), 2):
        button1 = types.InlineKeyboardButton(text=buttons[i], callback_data=buttons[i])
        if i + 1 < len(buttons):
            button2 = types.InlineKeyboardButton(text=buttons[i + 1], callback_data=buttons[i + 1])
            keyboard.add(button1, button2)
        else:
            keyboard.add(button1)
    return keyboard


@bot.message_handler(func=lambda message: message.text == '—É–¥–∞–ª–∏—Ç—å' and message.chat.id in admin_id)
def delete_media_files(message):
    user_id = message.chat.id
    categories = ['üìñ –î–∞—Ä—Å–∏ —Ä–æ–π–≥–æ–Ω', 'üìö –ú–∏–Ω–∏ –∫—É—Ä—Å', 'üéì –ö—É—Ä—Å–∏ –∫–∞–ª–æ–Ω', 'üí¨ –û—Ç–∑—ã–≤“≥–æ', 'üë®‚Äçüè´ –û–º—É–∑–≥–æ—Ä–æ–Ω', 'üßë‚Äçüíª –≠–∫–æ—Å–∏—Å—Ç–µ–º–∞']

    keyboard = create_keyboard(categories)

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–µ–π:", reply_markup=keyboard)
    user_data[user_id]['step'] = 'choose_category_to_delete'



@bot.callback_query_handler(func=lambda call: user_data.get(call.message.chat.id, {}).get('step') == 'choose_category_to_delete')
def choose_category_to_delete(call):
    user_id = call.message.chat.id
    category = call.data.split("_")[-1]
    media_folder_path = f'media/{category}'

    if os.path.exists(media_folder_path):
        files = [file for file in os.listdir(media_folder_path) if not file.endswith('.json')]
        
        if files:
            inline_keyboard = create_keyboard(files)  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∏–ª–∏ —Å—Å—ã–ª–∫–∞–º–∏
            bot.send_message(user_id, f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':", reply_markup=inline_keyboard)
            user_data[user_id]['category_to_delete'] = category
            user_data[user_id]['files_to_delete'] = files
            user_data[user_id]['step'] = 'delete_file_or_link'
        else:
            bot.send_message(user_id, f"–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ —Å—Å—ã–ª–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'.")
    else:
        bot.send_message(user_id, f"–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")



@bot.callback_query_handler(func=lambda call: user_data.get(call.message.chat.id, {}).get('step') == 'delete_file_or_link')
def delete_file_or_link(call):
    user_id = call.message.chat.id
    user_data_entry = user_data.get(user_id, {})
    category = user_data_entry.get('category_to_delete')
    media_folder_path = f'media/{category}'
    file_to_delete = call.data.strip()

    if file_to_delete in os.listdir(media_folder_path):
        file_path = os.path.join(media_folder_path, file_to_delete)
        caption_path = os.path.join(media_folder_path, f'{os.path.splitext(file_to_delete)[0]}.json')

        try:
            os.remove(file_path)
            if os.path.exists(caption_path):
                os.remove(caption_path)
                bot.send_message(user_id, f"–§–∞–π–ª –∏ –ø–æ–¥–ø–∏—Å—å '{file_to_delete}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'.")
            else:
                bot.send_message(user_id, f"–§–∞–π–ª '{file_to_delete}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'.")
        except Exception as e:
            bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏ –ø–æ–¥–ø–∏—Å–∏: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    else:
        bot.send_message(user_id, f"–§–∞–π–ª '{file_to_delete}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")



######################################################################################


new_des = {}

@bot.message_handler(func=lambda message: message.text == '‚úçÔ∏è –ù–æ–º–Ω–∞–≤–∏—Å–∏ –±–∞ –∫—É—Ä—Å' and message.chat.id not in admin_id)
def ask_for_course_choice(message):
    user_id = message.chat.id
    if user_id not in new_des:
        new_des[user_id] = {'name': None, 'phone': None, 'course': None, 'registration_count': 0}

    new_des[user_id]['registration_count'] += 1

    markup = types.InlineKeyboardMarkup(row_width=2)
    mini_course_button = types.InlineKeyboardButton("–ú–∏–Ω–∏ –∫—É—Ä—Å", callback_data='mini')
    big_course_button = types.InlineKeyboardButton("–ö—É—Ä—Å–∏ –∫–∞–ª–æ–Ω", callback_data='big')
    markup.add(mini_course_button, big_course_button)
    bot.send_message(user_id, "–ö—É—Ä—Å—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ['mini', 'big'])
def handle_course_choice(call):
    user_id = call.message.chat.id
    new_des[user_id]['course'] = call.data
    bot.send_message(user_id, "ü™™ –ù–æ–º:")

@bot.message_handler(func=lambda message: new_des.get(message.chat.id, {}).get('registration_count', 0) > 0 and new_des.get(message.chat.id, {}).get('name') is None)
def handle_name(message):
    user_id = message.chat.id
    new_des[user_id]['name'] = message.text
    bot.send_message(user_id, "üì± –†–∞“õ–∞–º–∏ –º–æ–±–∏–ª”£:")

@bot.message_handler(func=lambda message: new_des.get(message.chat.id, {}).get('registration_count', 0) > 0 and new_des.get(message.chat.id, {}).get('name') is not None and new_des.get(message.chat.id, {}).get('phone') is None)
def handle_phone_number(message):
    user_id = message.chat.id
    new_des[user_id]['phone'] = message.text
    bot.send_message(user_id, "üì® –¢–∞—à–∞–∫–∫—É—Ä, –¥–∞—Ä—Ö–æ—Å—Ç–∏ –®—É–º–æ “õ–∞–±—É–ª —à—É–¥.\n\n üì≤ –ò–Ω—Ç–∏–∑–æ—Ä–∏ –∑–∞–Ω–≥–∏ –º–µ–Ω–µ–¥“∑–µ—Ä–∏ –º–æ –±–æ—à–µ–¥!")
    
    course = new_des[user_id].get('course')
    user_name = new_des[user_id].get('name')
    user_phone = new_des[user_id].get('phone')

    if course == 'mini' or course == 'big':
        file_name = f"{course}_course.txt"
        file_path = os.path.join(media_folder, file_name)

        with open(file_path, 'a', encoding='utf-8') as file:
            file.write(f"–ò–º—è: {user_name}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_phone}\n\n")

    new_des[user_id] = {'name': None, 'phone': None, 'course': None, 'registration_count': 0}







bot.polling()






